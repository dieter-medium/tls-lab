version: "3.9"

volumes:
  tls-clients:
  tls-server:
  tls:

services:
  db:
    image: postgres:12-alpine
    command: -c ssl=on -c ssl_cert_file=/var/lib/postgresql/tls/service5.crt.pem -c ssl_key_file=/var/lib/postgresql/tls/service5.key -c ssl_dh_params_file=/var/lib/postgresql/tls/dhparam -c ssl_ciphers='ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384' -c ssl_min_protocol_version='TLSv1.2'
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - tls-server:/var/lib/postgresql/tls:ro
    networks:
      default:
        aliases:
          - db.compute.internal
          - service5.compute.internal
    depends_on:
      db-setup:
        condition: service_completed_successfully

  apache:
    build:
      context: ./apache
      dockerfile: Dockerfile
    volumes:
      - ./nginx/public:/var/www/html:ro
      - ./apache/000-default.conf:/etc/apache2/sites-available/000-default.conf
      - tls-server:/etc/apache2/ssl:ro
    networks:
      default:
        aliases:
          - service.compute2.internal
          - service1.compute2.internal
          - service2.compute2.internal
          - service3.compute2.internal
          - service4.compute2.internal
    depends_on:
      generator:
        condition: service_completed_successfully

  nginx:
    image: nginx
    volumes:
      - ./nginx/public:/usr/share/nginx/html:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - tls-server:/etc/nginx/tls:ro
    networks:
      default:
        aliases:
          - service.compute.internal
          - service1.compute.internal
          - service2.compute.internal
          - service3.compute.internal
          - service4.compute.internal
    depends_on:
      generator:
        condition: service_completed_successfully

  generator:
    build:
      context: ./generator
      dockerfile: Dockerfile
    command: sh -c 'cd /root && openssl rand -writerand .rnd && cd /src && ./gen_cert.sh'
    volumes:
      - tls-server:/tls-server
      - tls-clients:/tls-clients
      - tls:/src/tls

  db-setup:
    image: postgres:12-alpine
    command: bash -c "chown postgres /var/lib/postgresql/tls/service5.key && chown postgres /var/lib/postgresql/tls/service5.crt.pem && wget https://ssl-config.mozilla.org/ffdhe2048.txt -O /var/lib/postgresql/tls/dhparam"
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - tls-server:/var/lib/postgresql/tls
    depends_on:
      generator:
        condition: service_completed_successfully

  testssl:
    image: drwetter/testssl.sh
    entrypoint: [] 
    command: tail -f /dev/null
    depends_on:
      generator:
        condition: service_completed_successfully
    volumes:
      - tls-clients:/tmp/tls:ro

  console1:
    build:
      context: ./consoles
      dockerfile: Dockerfile.1
    command: tail -f /dev/null
    depends_on:
      generator:
        condition: service_completed_successfully
    volumes:
      - tls-clients:/tmp/tls:ro

  console2:
    build:
      context: ./consoles
      dockerfile: Dockerfile.2
    command: tail -f /dev/null
    depends_on:
      generator:
        condition: service_completed_successfully
    volumes:
      - tls-clients:/tmp/tls:ro

  console3:
    build:
      context: ./consoles
      dockerfile: Dockerfile.3
    command: tail -f /dev/null
    depends_on:
      generator:
        condition: service_completed_successfully
    volumes:
      - tls-clients:/tmp/tls:ro

  console4:
    image: postgres:12-alpine
    command: tail -f /dev/null
    #  psql -h db.compute.internal -U postgres
    environment:
      PGSSLMODE: verify-full
    depends_on:
      generator:
        condition: service_completed_successfully
    volumes:
      - tls-clients:/tmp/tls:ro
   
